# 関数型プログラミングは何がうれしい？

## 関数型プログラミングとは？

**参照透過的な関数を組み合わせることで解決するべき問題に対処していく宣言型のプログラミングのスタイルのことをいう**

- **参照透過性**
    - 同じ入力に対して同じ作用と同じ出力が保証されていることを参照透過性という
    - 数学の y = f(x) と同じで与えた引数が同じなら返る値は常に一定になることと一緒

## プログラミングパラダイム

大きく分けて２つあります

### 命令型プログラミング

- 最終的な出力を得るために状態を変化させる連続した文によって記述されるプログラミングスタイル
- **手続き型プログラミング**、**オブジェクト指向プログラミング** など

### 宣言型プログラミング

- 出力を得る方法ではなく、出力の性質・あるべき状態を文字通り宣言することでプログラムを構成すること
- 宣言型で複雑な処理を行わせるかという問題のひとつの解が **関数型プログラミング**

### 1〜100までの範囲における８の倍数を格納した配列を作る

同一の処理を手続き型、関数型で記述する

#### 手続き型プログラミング

```javascript
// Procedural programming
{
  const octuples = [];

  for(let n = 1; n < 101; n += 1) {
    if( n % 8 === 0) {
      octuples.push(n); 
    }
  }
  console.log(octuples);
}
```

#### 関数型プログラミング

```javascript
// Functional programming
{
  const range = (start, end) => [...new Array(end - start).keys()].map((n) => n + start);
  console.log(range(1, 101).filter((n) => n % 8 === 0));
}
```

#### 手続き型と関数型の違い

| 特徴             | 手続き型                                               | 関数型                                                               |
|:-----------------|:-------------------------------------------------------|:---------------------------------------------------------------------|
| ①変数について   | octuples に12回の破壊的変更、 n に100回の再代入がある  | 変数のひとつたりとも再代入や破壊的変更がなされていない               |
| ②使用されるもの | 「文（Statement）」を多用する                          | 「式（Expression）」を組み合わせてプログラムを構成する               |
| ③作成過程       | ボトムアップ的に積み上げていって最終成果物を完成させる | 最初から完成形を見据えて上で大雑把なところから絞り込んでいく形になる |

**①変数について**

- **可変性（Mutability）** と **不変性（Immutability）**
- 可変性の問題について
    - ミュータブルな変数に依存する処理が多ければ多いほど、プログラムの予測可能性が低下してバグが入り込みやすくなる。最終的な値が処理ステップの順序に依存しているため、ちょっとした見落としで踏むべきだったステップが飛ばされたり、意図せぬ別のステップが紛れ込んだりするようなことが起こる
- 不変性の利点
    - イミュータブルな変数しか使ってなければ上記問題は起きないため、関数型プログラミングが優れているポイントである

**②使用されるもの**

- 手続き型の方は for 文によるループの中で if 文によって条件分岐してというように、値を返さないサブルーチンの中で計算が実行されている
- 関数型の方はすべてが値を返す式の組み合わせでできている。range式、filter式が返す値で一区切りになっていて、それぞれの式は独立していて相互に干渉することがない

**③作成過程**

- 作成過程が逆である
    - 手続き型は octuples は空配列だったのが、要素がひとつずつ追加されていって完成に至っている
    - 関数型は 1〜100 の整数配列を作った上で、そこから 8 で割り切れるものだけを抜き出している
